#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/byraft'

params = {}
BANNER = <<-BANNER
Run byraft application
Usage:  byraft [options]
Option: -h --help           Print help
        -i <id>             Configure id for current node
        -p <port>           Configure port for current node
        -n <id>=<address>   Configure node id and address
        -e <range>          Configure election timeout in sec (ex) 0.1, 0.1:0.3
        -t                  Configure heartbeat period in sec
        -v                  Configure verbose option
BANNER
OptionParser.new do |parser|
  parser.banner = BANNER
  parser.on("-h", "--help") do
    puts parser
    exit
  end
  parser.on("-i", "--id <id>", String) do |id|
    params[:id] = id
  end
  parser.on("-p", "--port <port>", Integer) do |port|
    params[:port] = port
  end
  parser.on("-n", "--node <id>=<address>", String) do |str|
    id, address = str.split('=')
    params[:node] ||= {}
    params[:node][id] = address
  end
  parser.on("-e", "--e <range>", String) do |str|
    s, e = str.split(':')
    e = s unless e
    s, e = s.to_f, e.to_f
    params[:election_timeout] = s..e
  end
  parser.on("-t", "--heartbeat <period>", Float) do |p|
    params[:heartbeat_period] = p
  end
  parser.on("-v", "--verbose", TrueClass) do |v|
    params[:verbose] = v
  end
end.parse!

if params[:id].nil? || params[:node].nil?
  puts BANNER
  exit
end

params[:logger_level] = params.delete(:verbose) ? 0 : 1
id, port, nodes, opts = params[:id], params[:port], params[:node], params.except(:id, :port, :node)
Byraft.start(id, port, nodes, **opts)
Byraft.join
